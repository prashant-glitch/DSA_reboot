
//For bottom view just overwrite the hd data if there exists a node at same hd

class Solution
{
    class Pair{
        int hd;
        Node node;
        Pair(int hd, Node node)
        {
            this.hd=hd;
            this.node=node;
        }
    }
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        ArrayList<Integer>res=new ArrayList<>();
        if(root==null)
        {
            return res;
        }
        
        Queue<Pair>q=new LinkedList<>();
        q.offer(new Pair(0,root));
        Map<Integer,Integer>map=new TreeMap<>();
        while(!q.isEmpty())
        {
            Pair p=q.poll();
            int hd=p.hd;
            Node node=p.node;
            map.put(hd,node.data);
            if(node.left!=null)
            {
                q.offer(new Pair(hd-1,node.left));
            }
            if(node.right!=null)
            {
                q.offer(new Pair(hd+1,node.right));
            }
        }
        
        for(Map.Entry<Integer,Integer>e:map.entrySet())
        {
            res.add(e.getValue());
        }
        return res;
        
        
        
        
    }
}
