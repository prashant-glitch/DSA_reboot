class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        // int dp[]=new int[n+1];
        int p1=0;
        if(n==0)
        return p1;
        int p2=nums[0];
        if(n==1)
        return p2;
        int res=0;
        for(int i=2;i<n+1;i++)
        {
            int pick=nums[i-1]+dp[i-2];
            int nopick=dp[i-1];
            dp[i]=Math.max(pick,nopick);
        }
        return dp[n];
        // return recur(nums,index,dp);
    }
    //recursion
    // public int recur(int[]nums,int index)
    // {
    //     //base case
    //     if(index==0)
    //     return nums[index];
    //     if(index==-1)
    //     {
    //         return 0;
    //     }

    //     //pick
    //     int pick=nums[index]+recur(nums,index-2);
    //     //no pick
    //     int nopick=recur(nums,index-1);

    //     return Math.max(pick,nopick);
    // }

    //memoization
    // public int recur(int[]nums,int index,int dp[])
    // {
    //     //base case
    //     //jaha bhi return ho rha hai wha ... dp array m store karo
    //     if(index==0)
    //     {
    //     dp[index]=nums[index];
    //     return dp[index];
    //     }
    //     if(index==-1)
    //     {
    //         return 0;
    //     }
    //     if(dp[index]!=-1)
    //     {
    //         return dp[index];
    //     }
    //     //pick
    //     int pick=nums[index]+recur(nums,index-2,dp);
    //     //no pick
    //     int nopick=recur(nums,index-1,dp);
    //     dp[index]= Math.max(pick,nopick);
    //     return dp[index];
    // }

}
