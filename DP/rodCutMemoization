class Solution {
    public int cutRod(int[] price) {
        // code here
        int n=price.length;
        int rod[]=new int[n];
        int dp[][]=new int[n+1][n+1];
        for(int i=0;i<n+1;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        for(int i=0;i<n;i++)
        {
            rod[i]=i+1;
        }
        return recur(price,rod,n,0,dp);
    }
    public int recur(int price[],int rod[], int capacity,int index,int dp[][])
    {
        if(index==price.length)
        {
            return 0;
        }
        if(dp[index][capacity]!=-1)
        {
            return dp[index][capacity];
        }
        int pick=0;
        if(rod[index]<=capacity)
        pick=price[index]+recur(price,rod,capacity-rod[index],index,dp);
        int noPick=recur(price,rod,capacity,index+1,dp);
        dp[index][capacity]=Math.max(pick,noPick);
        return dp[index][capacity];
    }
}
