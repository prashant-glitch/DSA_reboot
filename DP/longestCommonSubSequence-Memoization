class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        if(text1.length()==0 || text2.length()==0)
        return 0;

        int n1=text1.length();
        int n2=text2.length();
        int dp[][]=new int[n1+1][n2+1];
        for(int i=0;i<n1+1;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        return recur(text1,text2,n1,n2,0,0,dp);
    }

    public int recur(String s1,String s2, int n1,int n2, int index1,int index2,int dp[][])
    {
        if(index1==n1 || index2==n2)
        {
            return 0;
        }
        if(dp[index1][index2]!=-1)
        return dp[index1][index2];
        int pick=0;
         if(s1.charAt(index1)==s2.charAt(index2))
         {
            pick=1+recur(s1,s2,n1,n2,index1+1,index2+1,dp);
         }
         else
         {
            pick=recur(s1,s2,n1,n2,index1+1,index2,dp);
         }
        int noPick=recur(s1,s2,n1,n2,index1,index2+1,dp);
        dp[index1][index2]=Math.max(pick,noPick);
        return dp[index1][index2];
    }
}
