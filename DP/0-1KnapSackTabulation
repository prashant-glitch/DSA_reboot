class Solution {
    // Function to return max value that can be put in knapsack of capacity.
    static int knapSack(int capacity, int val[], int wt[]) {
        // code here
        int n=val.length;
        int dp[][]=new int[n+1][capacity+1];
        //if array size is 0 then we will get 0 value in our bag
        // for(int i=0;i<capacity+1;i++)
        // {
        //     dp[0][i]=0;
        // }
        // //if bag capacity is 0 we will not able to pick any item
        // for(int i=0;i<n+1;i++)
        // {
        //     dp[i][0]=0;
        // }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<capacity+1;j++)
            {
                //pick
                //no pick
                if(wt[i-1]<=j)
                {
                    dp[i][j]=Math.max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        
        
        return dp[n][capacity];
    }
