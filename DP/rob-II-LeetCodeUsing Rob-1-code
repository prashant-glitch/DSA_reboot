class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        if(n==1)
        return nums[0];
        int nums1[]=new int [n];
        int nums2[]=new int[n];
        int j=0;
        int k=0;
        for(int i=0;i<n;i++)
        {
            if(i!=0)
            {
                nums1[j++]=nums[i];
            }
            if(i!=n-1)
            {
                nums2[k++]=nums[i];
            }
        }

        return Math.max(rob1(nums1),rob1(nums2));
    }
    public int rob1(int[]nums)
    {
        int n=nums.length;
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        return recur(nums,n-1,dp);
    }
    public int recur(int nums[],int index,int []dp)
    {
        if(index==0)
        {
            dp[index]=nums[index];
        return dp[index];
        }
        if(index==-1)
        return 0;

        if(dp[index]!=-1)
        {
            return dp[index];
        }
        //pick
        int pick=nums[index]+recur(nums,index-2,dp);
        //nopick
        int nopick=recur(nums,index-1,dp);
        dp[index]=Math.max(pick,nopick);
        return dp[index];
    }
}
