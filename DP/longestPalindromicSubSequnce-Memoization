class Solution {
    public boolean isPalindrome(String s)
    {
        int l=0;
        int r=s.length()-1;
        while(l<r)
        {
            if(s.charAt(l)!=s.charAt(r))
            {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
    public int longestPalindromeSubseq(String s) {
        int n=s.length();
        StringBuilder sb=new StringBuilder(s);
        String s2=sb.reverse().toString();
        int dp[][]=new int [n+1][n+1];
        for(int i=0;i<n+1;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        return recur(s,s2,n,0,0,dp);
    }

    public int recur(String s1,String s2, int n, int index1,int index2,int dp[][])
    {
        if(index1==n || index2==n)
        return 0;
        if(dp[index1][index2]!=-1)
        return dp[index1][index2];
        int pick=0;
        if(s1.charAt(index1)==s2.charAt(index2))
        {
            pick= 1+recur(s1,s2,n,index1+1,index2+1,dp);
        }
        else
        {
            pick=recur(s1,s2,n,index1,index2+1,dp);
        }
        int noPick=recur(s1,s2,n,index1+1,index2,dp);

        dp[index1][index2]=Math.max(pick,noPick);
        return dp[index1][index2];
    }
}
