class Solution {
    public int minCostClimbingStairs(int[] cost) {
       int n=cost.length;
       int dp[]=new int [n+1];
       Arrays.fill(dp,-1);
       return recursive(n,cost,dp); 
    }
    public int recursive(int n, int []cost, int dp[])
    {
        if(n<=1)
        {
        dp[n]=0;
        return dp[n];
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        dp[n]= Math.min((recursive(n-1,cost,dp)+cost[n-1]),(recursive(n-2,cost,dp)+cost[n-2]));
        return dp[n];

    }

    /*TLE */
      public int minCostClimbingStairs(int[] cost) {
      int n=cost.length;
      return recursive(n,cost); 
    }
    public int recursive(int n, int []cost)
    {
        if(n<=1)
        return 0;

        return Math.min((recursive(n-1,cost)+cost[n-1]),(recursive(n-2,cost)+cost[n-2]));

    }
}
